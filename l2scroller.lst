# file opened: ./src/main.asm
  1   0000                      SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
  2   0000                      DEVICE ZXSPECTRUMNEXT
  3   0000                      CSPECTMAP "l2scroller.map"
  4   0000
  5   0000              ;------------------------------------------------------------------------------
  6   0000              ; Layer2 SCROLLER v1 - Scroller via DMA copy on Layer2
  7   0000              ; em00k 17.03.24
  8   0000
  9   0000                      org  $8000
 10   8000
 11   8000              ;------------------------------------------------------------------------------
 12   8000              ; Includes
 13   8000
 14   8000                      include "hardware.inc"                          ; hardare equates and ports
# file opened: ./src/hardware.inc
  1+  8000              BIT_UP			equ 4	; 16
  2+  8000              BIT_DOWN		equ 5	; 32
  3+  8000              BIT_LEFT		equ 6	; 64
  4+  8000              BIT_RIGHT		equ 7	; 128
  5+  8000
  6+  8000              DIR_NONE		equ %00000000
  7+  8000              DIR_UP			equ %00010000
  8+  8000              DIR_DOWN		equ %00100000
  9+  8000              DIR_LEFT		equ %01000000
 10+  8000              DIR_RIGHT		equ %10000000
 11+  8000
 12+  8000              DIR_UP_I		equ %11101111
 13+  8000              DIR_DOWN_I		equ %11011111
 14+  8000              DIR_LEFT_I		equ %10111111
 15+  8000              DIR_RIGHT_I		equ %01111111
 16+  8000
 17+  8000              ;-----------------------------------------------------------------------------
 18+  8000              ;-- I/O ports - ZX Spectrum classic (48, 128, Timex, Pentagon, ...) ports
 19+  8000
 20+  8000              ULA_P_FE                        equ $FE     ; BORDER + MIC + BEEP + read Keyboard
 21+  8000              TIMEX_P_FF                      equ $FF     ; Timex video control port
 22+  8000
 23+  8000              ZX128_MEMORY_P_7FFD             equ $7FFD   ; ZX Spectrum 128 ports
 24+  8000              ZX128_MEMORY_P_DFFD             equ $DFFD
 25+  8000              ZX128P3_MEMORY_P_1FFD           equ $1FFD
 26+  8000
 27+  8000              AY_REG_P_FFFD                   equ $FFFD
 28+  8000              AY_DATA_P_BFFD                  equ $BFFD
 29+  8000
 30+  8000              Z80_DMA_PORT_DATAGEAR           equ $6B     ; on ZXN the zxnDMA handles this in zxnDMA mode
 31+  8000              Z80_DMA_PORT_MB02               equ $0B     ; on ZXN the zxnDMA handles this in Zilog mode
 32+  8000
 33+  8000              DIVMMC_CONTROL_P_E3             equ $E3
 34+  8000              SPI_CS_P_E7                     equ $E7
 35+  8000              SPI_DATA_P_EB                   equ $EB
 36+  8000
 37+  8000              KEMPSTON_MOUSE_X_P_FBDF         equ $FBDF
 38+  8000              KEMPSTON_MOUSE_Y_P_FFDF         equ $FFDF
 39+  8000              KEMPSTON_MOUSE_B_P_FADF         equ $FADF   ; kempston mouse wheel+buttons
 40+  8000
 41+  8000              KEMPSTON_JOY1_P_1F              equ $1F
 42+  8000              KEMPSTON_JOY2_P_37              equ $37
 43+  8000
 44+  8000              ;-----------------------------------------------------------------------------
 45+  8000              ;-- I/O ports - ZX Spectrum NEXT specific ports
 46+  8000
 47+  8000              TBBLUE_REGISTER_SELECT_P_243B   equ $243B
 48+  8000                  ; -- port $243B = 9275  Read+Write (detection bitmask: %0010_0100_0011_1011)
 49+  8000                  ;   -- selects NextREG mapped at port TBBLUE_REGISTER_ACCESS_P_253B
 50+  8000
 51+  8000              TBBLUE_REGISTER_ACCESS_P_253B   equ $253B
 52+  8000                  ; -- port $253B = 9531  Read?+Write? (detection bitmask: %0010_0101_0011_1011)
 53+  8000                  ;   -- data for selected NextREG (read/write depends on the register selected)
 54+  8000
 55+  8000              ; indexes into DAC_CHANNEL_* def-arrays, depending on the type of DAC you want to use
 56+  8000              DAC_GS_COVOX_INDEX              equ     1
 57+  8000              DAC_PENTAGON_ATM_INDEX          equ     2
 58+  8000              DAC_SPECDRUM_INDEX              equ     3
 59+  8000              DAC_SOUNDRIVE1_INDEX            equ     4
 60+  8000              DAC_SOUNDRIVE2_INDEX            equ     5
 61+  8000              DAC_COVOX_INDEX                 equ     6
 62+  8000              DAC_PROFI_COVOX_INDEX           equ     7
 63+  8000                  ; -- enable 8bit DACs with PERIPHERAL_3_NR_08, use DAC_*_INDEX to access particular set of ports
 64+  8000                  ;DEFARRAY    DAC_CHANNEL_A  @@,  @@, $FB, $DF, $1F, $F1,  @@, $3F
 65+  8000                  ;DEFARRAY    DAC_CHANNEL_B  @@, $B3,  @@,  @@, $0F, $F3, $0F,  @@
 66+  8000                  ;DEFARRAY    DAC_CHANNEL_C  @@, $B3,  @@,  @@, $4F, $F9, $4F,  @@
 67+  8000                  ;DEFARRAY    DAC_CHANNEL_D  @@,  @@, $FB, $DF, $5F, $FB,  @@, $5F
 68+  8000                  ; -- like for example: ld bc,DAC_CHANNEL_B[DAC_PROFI_COVOX_INDEX]
 69+  8000
 70+  8000              I2C_SCL_P_103B                  equ $103B   ; i2c bus port (clock) (write only?)
 71+  8000              I2C_SDA_P_113B                  equ $113B   ; i2c bus port (data) (read+write)
 72+  8000              UART_TX_P_133B                  equ $133B   ; UART tx port (read+write)
 73+  8000              UART_RX_P_143B                  equ $143B   ; UART rx port (read+write)
 74+  8000              UART_CTRL_P_153B                equ $153B   ; UART control port (read+write)
 75+  8000
 76+  8000              ZILOG_DMA_P_0B                  equ $0B
 77+  8000              ZXN_DMA_P_6B                    equ $6B
 78+  8000                  ; -- port $6B = 107 Read+Write (detection bitmask: %xxxx_xxxx_0110_1011)
 79+  8000                  ;   - The zxnDMA is mostly compatible with Zilog DMA chip (Z8410) (at least
 80+  8000                  ;     as far as old ZX apps are concerned), but has many modifications.
 81+  8000                  ;   - core3.1.1 update - Zilog/zxnDMA mode is now selected by port number, not PERIPHERAL_2_NR_06!
 82+  8000                  ;   - core3.0 update - (REMOVED) specific behaviour details can be selected (PERIPHERAL_2_NR_06)
 83+  8000
 84+  8000              LAYER2_ACCESS_P_123B            equ $123B
 85+  8000                  ; -- port $123B = 4667 Read+Write (detection bitmask: %0001_0010_0011_1011)
 86+  8000                  ;   - see ports.txt or wiki for details (has become a bit more complex over time)
 87+  8000
 88+  8000              LAYER2_ACCESS_WRITE_OVER_ROM    equ $01     ; map Layer2 bank into ROM area (0000..3FFF) for WRITE-only (reads as ROM)
 89+  8000              LAYER2_ACCESS_L2_ENABLED        equ $02     ; enable Layer2 (make banks form nextreg $12 visible)
 90+  8000              LAYER2_ACCESS_READ_OVER_ROM     equ $04     ; map Layer2 bank into ROM area (0000..3FFF) for READ-only
 91+  8000              LAYER2_ACCESS_SHADOW_OVER_ROM   equ $08     ; bank selected by bits 6-7 is from "shadow Layer 2" banks range (nextreg $13)
 92+  8000              LAYER2_ACCESS_BANK_OFFSET       equ $10     ; bit 2-0 is bank offset for current active mapping +0..+7 (other bits are reserved, use 0)
 93+  8000              LAYER2_ACCESS_OVER_ROM_BANK_M   equ $C0     ; (mask of) value 0..3 selecting bank mapped for R/W (Nextreg $12 or $13)
 94+  8000              LAYER2_ACCESS_OVER_ROM_BANK_0   equ $00     ; screen lines 0..63    (256x192) or columns 0..63    (320x256) or columns 0..127   (640x256)
 95+  8000              LAYER2_ACCESS_OVER_ROM_BANK_1   equ $40     ; screen lines 64..127  (256x192) or columns 64..127  (320x256) or columns 128..255 (640x256)
 96+  8000              LAYER2_ACCESS_OVER_ROM_BANK_2   equ $80     ; screen lines 128..191 (256x192) or columns 128..191 (320x256) or columns 256..383 (640x256)
 97+  8000              LAYER2_ACCESS_OVER_ROM_48K      equ $C0     ; maps all 0..191 lines into $0000..$BFFF region (256x192) or 2/3 of columns in 320x256/640x256
 98+  8000
 99+  8000              SPRITE_STATUS_SLOT_SELECT_P_303B    equ $303B
100+  8000                  ; -- port $303B = 12347  Read+Write (detection bitmask: %0011_0000_0011_1011)
101+  8000                  ;   -- write:
102+  8000                  ;     - sets both "sprite slot" (0..63) and "pattern slot" (0..63 +128)
103+  8000                  ;     - once the sprite/pattern slots are set, they act independently and
104+  8000                  ;     each port ($xx57 and $xx5B) will auto-increment its own slot index
105+  8000                  ;     (to resync one can write to this port again).
106+  8000                  ;     - the +128 flag will make the pattern upload start at byte 128 of pattern
107+  8000                  ;     slot (second half of slot)
108+  8000                  ;     - The sprite-slot (sprite-attributes) may be optionally interlinked with
109+  8000                  ;     NextReg $34 (feature controlled by NextReg $34)
110+  8000                  ;     - auto-increments of slot position from value 63 are officially
111+  8000                  ;     "undefined behaviour", wrap to 0 is not guaranteed. (only setting slots
112+  8000                  ;     explicitly back to valid 0..63 will make your code future-proof)
113+  8000                  ;   -- read (will also reset both collision and max-sprites flags):
114+  8000                  ;     - bit 1 = maximum sprites per line hit (set when sprite renderer ran
115+  8000                  ;               out of time when preparing next scanline)
116+  8000                  ;     - bit 0 = collision flag (set when any sprites draw non-transparent
117+  8000                  ;               pixel at the same location)
118+  8000                  ;     Both flags contain values for current scanline already at the beginning
119+  8000                  ;     of scanline (sprite engine renders one line ahead into buffer and updates
120+  8000                  ;     flags progressively as it renders the sprites)
121+  8000              SPRITE_STATUS_MAXIMUM_SPRITES   equ $02
122+  8000              SPRITE_STATUS_COLLISION         equ $01
123+  8000              SPRITE_SLOT_SELECT_PATTERN_HALF equ 128     ; add it to 0..63 index to make pattern upload start at second half of pattern
124+  8000
125+  8000              SPRITE_ATTRIBUTE_P_57           equ $57
126+  8000                  ; -- port $xx57 = 87 write-only (detection bitmask: %xxxx_xxxx_0101_0111)
127+  8000                  ;  - writing 4 or 5 bytes long structures to control particular sprite
128+  8000                  ;  - after 4/5 bytes block the sprite slot index is auto-incremented
129+  8000                  ;  - for detailed documentation check official docs or wiki (too long)
130+  8000
131+  8000              SPRITE_PATTERN_P_5B             equ $5B
132+  8000                  ; -- port $xx5B = 91 write-only (detection bitmask: %xxxx_xxxx_0101_1011)
133+  8000                  ;  - each pattern slot is 256 bytes long = one 16x16 pattern of 8-bit pixels
134+  8000                  ;    or two 16x16 patterns of 4-bit pixels.
135+  8000                  ;  - Patterns are uploaded in "English" order (left to right, top to bottom),
136+  8000                  ;    one byte encodes single pixel in 8 bit mode and two pixels in 4 bit
137+  8000                  ;    mode (bits 7-4 are "left" pixel, 3-0 are "right" pixel)
138+  8000                  ;  - pixels are offset (index) into active sprite palette
139+  8000
140+  8000              TURBO_SOUND_CONTROL_P_FFFD      equ $FFFD   ; write with bit 7 = 1 (port shared with AY)
141+  8000
142+  8000              ;-----------------------------------------------------------------------------
143+  8000              ;-- NEXT HW Registers (NextReg)
144+  8000              MACHINE_ID_NR_00                equ $00
145+  8000              NEXT_VERSION_NR_01              equ $01
146+  8000              NEXT_RESET_NR_02                equ $02
147+  8000              MACHINE_TYPE_NR_03              equ $03
148+  8000              ROM_MAPPING_NR_04               equ $04     ;In config mode, allows RAM to be mapped to ROM area.
149+  8000              PERIPHERAL_1_NR_05              equ $05     ;Sets joystick mode, video frequency and Scandoubler.
150+  8000              PERIPHERAL_2_NR_06              equ $06     ;Enables turbo/50Hz/60Hz keys, DivMMC, Multiface and audio (beep/AY)
151+  8000              TURBO_CONTROL_NR_07             equ $07
152+  8000              PERIPHERAL_3_NR_08              equ $08     ;ABC/ACB Stereo, Internal Speaker, SpecDrum, Timex Video Modes, Turbo Sound Next, RAM contention and [un]lock 128k paging.
153+  8000              PERIPHERAL_4_NR_09              equ $09     ;Sets scanlines, AY mono output, Sprite-id lockstep, disables Kempston and divMMC ports.
154+  8000              PERIPHERAL_5_NR_0A              equ $0A     ;Mouse buttons and DPI settings (core 3.1.5)
155+  8000              NEXT_VERSION_MINOR_NR_0E        equ $0E
156+  8000              ANTI_BRICK_NR_10                equ $10
157+  8000              VIDEO_TIMING_NR_11              equ $11
158+  8000              LAYER2_RAM_BANK_NR_12           equ $12     ;bank number where visible Layer 2 video memory begins.
159+  8000              LAYER2_RAM_SHADOW_BANK_NR_13    equ $13     ;bank number for "shadow" write-over-rom mapping
160+  8000              GLOBAL_TRANSPARENCY_NR_14       equ $14     ;Sets the color treated as transparent for ULA/Layer2/LoRes
161+  8000              SPRITE_CONTROL_NR_15            equ $15     ;LoRes mode, Sprites configuration, layers priority
162+  8000                  ; bit 7: enable LoRes mode
163+  8000                  ; bit 6: sprite rendering (1=sprite 0 on top of other, 0=sprite 0 at bottom)
164+  8000                  ; bit 5: If 1, the clipping works even in "over border" mode
165+  8000                  ; 4-2: layers priority: 000=SLU, 001=LSU, 010=SUL, 011=LUS, 100=USL, 101=ULS, 110=S,mix(U+L), 111=S,mix(U+L-5)
166+  8000                  ; bit 1: enable sprites over border, bit 0: show sprites
167+  8000              LAYER2_XOFFSET_NR_16            equ $16
168+  8000              LAYER2_YOFFSET_NR_17            equ $17
169+  8000              CLIP_LAYER2_NR_18               equ $18
170+  8000              CLIP_SPRITE_NR_19               equ $19
171+  8000              CLIP_ULA_LORES_NR_1A            equ $1A
172+  8000              CLIP_TILEMAP_NR_1B              equ $1B
173+  8000              CLIP_WINDOW_CONTROL_NR_1C       equ $1C     ;set to 15 to reset all clip-window indices to 0
174+  8000              VIDEO_LINE_MSB_NR_1E            equ $1E
175+  8000              VIDEO_LINE_LSB_NR_1F            equ $1F
176+  8000              VIDEO_INTERUPT_CONTROL_NR_22    equ $22     ;Controls the timing of raster interrupts and the ULA frame interrupt.
177+  8000              VIDEO_INTERUPT_VALUE_NR_23      equ $23
178+  8000              ULA_XOFFSET_NR_26               equ $26     ;since core 3.0
179+  8000              ULA_YOFFSET_NR_27               equ $27     ;since core 3.0
180+  8000              HIGH_ADRESS_KEYMAP_NR_28        equ $28     ;reads first 8b part of value written to $44 (even unfinished 16b write)
181+  8000              LOW_ADRESS_KEYMAP_NR_29         equ $29
182+  8000              HIGH_DATA_TO_KEYMAP_NR_2A       equ $2A
183+  8000              LOW_DATA_TO_KEYMAP_NR_2B        equ $2B
184+  8000              DAC_B_MIRROR_NR_2C              equ $2C     ;reads as MSB of Pi I2S left side sample, LSB waits at $2D
185+  8000              DAC_AD_MIRROR_NR_2D             equ $2D     ;another alias for $2D, reads LSB of value initiated by $2C or $2E read
186+  8000              SOUNDDRIVE_DF_MIRROR_NR_2D      equ $2D     ;Nextreg port-mirror of port 0xDF
187+  8000              DAC_C_MIRROR_NR_2E              equ $2E     ;reads as MSB of Pi I2S right side sample, LSB waits at $2D
188+  8000              TILEMAP_XOFFSET_MSB_NR_2F       equ $2F
189+  8000              TILEMAP_XOFFSET_LSB_NR_30       equ $30
190+  8000              TILEMAP_YOFFSET_NR_31           equ $31
191+  8000              LORES_XOFFSET_NR_32             equ $32
192+  8000              LORES_YOFFSET_NR_33             equ $33
193+  8000              SPRITE_ATTR_SLOT_SEL_NR_34      equ $34     ;Sprite-attribute slot index for $35-$39/$75-$79 port $57 mirrors
194+  8000              SPRITE_ATTR0_NR_35              equ $35     ;port $57 mirror in nextreg space (accessible to copper)
195+  8000              SPRITE_ATTR1_NR_36              equ $36
196+  8000              SPRITE_ATTR2_NR_37              equ $37
197+  8000              SPRITE_ATTR3_NR_38              equ $38
198+  8000              SPRITE_ATTR4_NR_39              equ $39
199+  8000              PALETTE_INDEX_NR_40             equ $40     ;Chooses a ULANext palette number to configure.
200+  8000              PALETTE_VALUE_NR_41             equ $41     ;Used to upload 8-bit colors to the ULANext palette.
201+  8000              PALETTE_FORMAT_NR_42            equ $42     ;ink-mask for ULANext modes
202+  8000              PALETTE_CONTROL_NR_43           equ $43     ;Enables or disables ULANext interpretation of attribute values and toggles active palette.
203+  8000              PALETTE_VALUE_9BIT_NR_44        equ $44     ;Holds the additional blue color bit for RGB333 color selection.
204+  8000              TRANSPARENCY_FALLBACK_COL_NR_4A equ $4A     ;8-bit colour to be drawn when all layers are transparent
205+  8000              SPRITE_TRANSPARENCY_I_NR_4B     equ $4B     ;index of transparent colour in sprite palette (only bottom 4 bits for 4-bit patterns)
206+  8000              TILEMAP_TRANSPARENCY_I_NR_4C    equ $4C     ;index of transparent colour in tilemap graphics (only bottom 4 bits)
207+  8000              MMU0_0000_NR_50                 equ $50     ;Set a Spectrum RAM page at position 0x0000 to 0x1FFF
208+  8000              MMU1_2000_NR_51                 equ $51     ;Set a Spectrum RAM page at position 0x2000 to 0x3FFF
209+  8000              MMU2_4000_NR_52                 equ $52     ;Set a Spectrum RAM page at position 0x4000 to 0x5FFF
210+  8000              MMU3_6000_NR_53                 equ $53     ;Set a Spectrum RAM page at position 0x6000 to 0x7FFF
211+  8000              MMU4_8000_NR_54                 equ $54     ;Set a Spectrum RAM page at position 0x8000 to 0x9FFF
212+  8000              MMU5_A000_NR_55                 equ $55     ;Set a Spectrum RAM page at position 0xA000 to 0xBFFF
213+  8000              MMU6_C000_NR_56                 equ $56     ;Set a Spectrum RAM page at position 0xC000 to 0xDFFF
214+  8000              MMU7_E000_NR_57                 equ $57     ;Set a Spectrum RAM page at position 0xE000 to 0xFFFF
215+  8000              COPPER_DATA_NR_60               equ $60
216+  8000              COPPER_CONTROL_LO_NR_61         equ $61
217+  8000              COPPER_CONTROL_HI_NR_62         equ $62
218+  8000              COPPER_DATA_16B_NR_63           equ $63     ; same as $60, but waits for full 16b before write
219+  8000              VIDEO_LINE_OFFSET_NR_64         equ $64     ; (core 3.1.5)
220+  8000              ULA_CONTROL_NR_68               equ $68
221+  8000              DISPLAY_CONTROL_NR_69           equ $69
222+  8000              LORES_CONTROL_NR_6A             equ $6A
223+  8000              TILEMAP_CONTROL_NR_6B           equ $6B
224+  8000              TILEMAP_DEFAULT_ATTR_NR_6C      equ $6C
225+  8000              TILEMAP_BASE_ADR_NR_6E          equ $6E     ;Tilemap base address of map
226+  8000              TILEMAP_GFX_ADR_NR_6F           equ $6F     ;Tilemap definitions (graphics of tiles)
227+  8000              LAYER2_CONTROL_NR_70            equ $70
228+  8000              LAYER2_XOFFSET_MSB_NR_71        equ $71     ; for 320x256 and 640x256 L2 modes (core 3.0.6+)
229+  8000              SPRITE_ATTR0_INC_NR_75          equ $75     ;port $57 mirror in nextreg space (accessible to copper) (slot index++)
230+  8000              SPRITE_ATTR1_INC_NR_76          equ $76
231+  8000              SPRITE_ATTR2_INC_NR_77          equ $77
232+  8000              SPRITE_ATTR3_INC_NR_78          equ $78
233+  8000              SPRITE_ATTR4_INC_NR_79          equ $79
234+  8000              USER_STORAGE_0_NR_7F            equ $7F
235+  8000              EXPANSION_BUS_ENABLE_NR_80      equ $80
236+  8000              EXPANSION_BUS_CONTROL_NR_81     equ $81
237+  8000              INTERNAL_PORT_DECODING_0_NR_82  equ $82     ;bits 0-7
238+  8000              INTERNAL_PORT_DECODING_1_NR_83  equ $83     ;bits 8-15
239+  8000              INTERNAL_PORT_DECODING_2_NR_84  equ $84     ;bits 16-23
240+  8000              INTERNAL_PORT_DECODING_3_NR_85  equ $85     ;bits 24-31
241+  8000              EXPANSION_BUS_DECODING_0_NR_86  equ $86     ;bits 0-7 mask
242+  8000              EXPANSION_BUS_DECODING_1_NR_87  equ $87     ;bits 8-15 mask
243+  8000              EXPANSION_BUS_DECODING_2_NR_88  equ $88     ;bits 16-23 mask
244+  8000              EXPANSION_BUS_DECODING_3_NR_89  equ $89     ;bits 24-31 mask
245+  8000              EXPANSION_BUS_PROPAGATE_NR_8A   equ $8A     ;Monitoring internal I/O or adding external keyboard
246+  8000              ALTERNATE_ROM_NR_8C             equ $8C     ;Enable alternate ROM or lock 48k ROM
247+  8000              ZX_MEM_MAPPING_NR_8E            equ $8E     ;shortcut to set classic zx128+3 memory model at one place
248+  8000              PI_GPIO_OUT_ENABLE_0_NR_90      equ $90     ;pins 0-7
249+  8000              PI_GPIO_OUT_ENABLE_1_NR_91      equ $91     ;pins 8-15
250+  8000              PI_GPIO_OUT_ENABLE_2_NR_92      equ $92     ;pins 16-23
251+  8000              PI_GPIO_OUT_ENABLE_3_NR_93      equ $93     ;pins 24-27
252+  8000              PI_GPIO_0_NR_98                 equ $98     ;pins 0-7
253+  8000              PI_GPIO_1_NR_99                 equ $99     ;pins 8-15
254+  8000              PI_GPIO_2_NR_9A                 equ $9A     ;pins 16-23
255+  8000              PI_GPIO_3_NR_9B                 equ $9B     ;pins 24-27
256+  8000              PI_PERIPHERALS_ENABLE_NR_A0     equ $A0
257+  8000              PI_I2S_AUDIO_CONTROL_NR_A2      equ $A2
258+  8000              ;PI_I2S_CLOCK_DIVIDE_NR_A3       equ $A3    ; REMOVED in core 3.1.5 (no more master-mode)
259+  8000              ESP_WIFI_GPIO_OUTPUT_NR_A8      equ $A8
260+  8000              ESP_WIFI_GPIO_NR_A9             equ $A9
261+  8000              EXTENDED_KEYS_0_NR_B0           equ $B0     ;read Next compound keys as standalone keys (outside of zx48 matrix)
262+  8000              EXTENDED_KEYS_1_NR_B1           equ $B1     ;read Next compound keys as standalone keys (outside of zx48 matrix)
263+  8000              ;DIVMMC_TRAP_ENABLE_1_NR_B2      equ $B2    ; NOT IMPLEMENTED in core yet (as of 3.1.4), may happen in future
264+  8000              ;DIVMMC_TRAP_ENABLE_2_NR_B4      equ $B4    ; NOT IMPLEMENTED in core yet (as of 3.1.4), may happen in future
265+  8000              DEBUG_LED_CONTROL_NR_FF         equ $FF     ;Turns debug LEDs on and off on TBBlue implementations that have them.
266+  8000
267+  8000              ;-----------------------------------------------------------------------------
268+  8000              ;-- common memory addresses
269+  8000              MEM_ROM_CHARS_3C00              equ $3C00   ; actual chars start at $3D00 with space
270+  8000              MEM_ZX_SCREEN_4000              equ $4000
271+  8000              MEM_ZX_ATTRIB_5800              equ $5800
272+  8000              MEM_LORES0_4000                 equ $4000
273+  8000              MEM_LORES1_6000                 equ $6000
274+  8000              MEM_TIMEX_SCR0_4000             equ $4000
275+  8000              MEM_TIMEX_SCR1_6000             equ $6000
276+  8000
277+  8000              ;-----------------------------------------------------------------------------
278+  8000              ;-- Copper commands
279+  8000              COPPER_NOOP                     equ %00000000
280+  8000              COPPER_WAIT_H                   equ %10000000
281+  8000              COPPER_HALT_B                   equ $FF   ; 2x $FF = wait for (511,63) = infinite wait
282+  8000
283+  8000              ;===========================================================================
284+  8000              ; Ports
285+  8000              ;===========================================================================
286+  8000              NEXTREG_REGISTER_SELECT_PORT		equ $243B
287+  8000              NEXTREG_REGISTER_ACCESS_PORT		equ $253B
288+  8000              SPRITE_SLOT_SELECT_PORT			equ $303B
289+  8000              MEMORY_PAGING_CONTROL_PORT		equ $7FFD
290+  8000              AY_REGISTER_WRITE_PORT			equ $BFFD
291+  8000              MEMORY_BANK_SELECT_PORT			equ $DFFD
292+  8000              AY_SOUND_CONTROL_PORT			equ $FFFD
293+  8000              UART_WRITE_TX				equ $133B	; Write is byte to send, when read is status 0x01 = RX_AVAIL or 0x02 - TX_READY
294+  8000              UART_READ_RX				equ $143B	; Read is byte received, when written sets the BAUD rate. (now two bytes of prescaler TBU >.28)
295+  8000              UART_SELECT				equ $153B
296+  8000              Z80_DMA_DATAGEAR_PORT			equ $6b
297+  8000              SPRITE_INFO_PORT			equ $57
298+  8000              SPRITE_IMAGE_PORT 			equ $5b
299+  8000
300+  8000              ;-----------------------------------------------------------------------------
301+  8000              ; DMA (Register 6)
302+  8000              DMA_RESET					equ $C3
303+  8000              DMA_RESET_PORT_A_TIMING		equ $C7
304+  8000              DMA_RESET_PORT_B_TIMING		equ $CB
305+  8000              DMA_LOAD					equ $CF
306+  8000              DMA_CONTINUE				equ $D3
307+  8000              DMA_DISABLE_INTERUPTS		equ $AF
308+  8000              DMA_ENABLE_INTERUPTS		equ $AB
309+  8000              DMA_RESET_DISABLE_INTERUPTS	equ $A3
310+  8000              DMA_ENABLE_AFTER_RETI		equ $B7
311+  8000              DMA_READ_STATUS_BYTE		equ $BF
312+  8000              DMA_REINIT_STATUS_BYTE		equ $8B
313+  8000              DMA_START_READ_SEQUENCE		equ $A7
314+  8000              DMA_FORCE_READY				equ $B3
315+  8000              DMA_DISABLE					equ $83
316+  8000              DMA_ENABLE					equ $87
317+  8000              DMA_READ_MASK_FOLLOWS		equ $BB
318+  8000              DMA_WRITE_REGISTER_COMMAND  equ $bb
319+  8000              DMA_BURST				    equ %11001101
320+  8000              DMA_CONTINUOUS				equ %10101101
321+  8000              KEYB        equ $7F10
322+  8000              KEYN        equ $7F08
323+  8000              KEYM        equ $7F04
324+  8000              KEYSYMBOL   equ $7F02
325+  8000              KEYSPACE    equ $7F01
326+  8000              KEYH        equ $BF10
327+  8000              KEYJ        equ $BF08
328+  8000              KEYK        equ $BF04
329+  8000              KEYL        equ $BF02
330+  8000              KEYENTER    equ $BF01
331+  8000              KEYY        equ $DF10
332+  8000              KEYU        equ $DF08
333+  8000              KEYI        equ $DF04
334+  8000              KEYO        equ $DF02
335+  8000              KEYP        equ $DF01
336+  8000              KEY6        equ $EF10
337+  8000              KEY7        equ $EF08
338+  8000              KEY8        equ $EF04
339+  8000              KEY9        equ $EF02
340+  8000              KEY0        equ $EF01
341+  8000              KEY5        equ $F710
342+  8000              KEY4        equ $F708
343+  8000              KEY3        equ $F704
344+  8000              KEY2        equ $F702
345+  8000              KEY1        equ $F701
346+  8000              KEYT        equ $FB10
347+  8000              KEYR        equ $FB08
348+  8000              KEYE        equ $FB04
349+  8000              KEYW        equ $FB02
350+  8000              KEYQ        equ $FB01
351+  8000              KEYG       equ $FD10
352+  8000              KEYF       equ $FD08
353+  8000              KEYD       equ $FD04
354+  8000              KEYS       equ $FD02
355+  8000              KEYA       equ $FD01
356+  8000              KEYV       equ $FE10
357+  8000              KEYC       equ $FE08
358+  8000              KEYX       equ $FE04
359+  8000              KEYZ       equ $FE02
360+  8000              KEYCAPS    equ $FE01
# file closed: ./src/hardware.inc
 15   8000
 16   8000              ;------------------------------------------------------------------------------
 17   8000              ; Main Program
 18   8000
 19   8000              main:
 20   8000
 21   8000 CD 70 80             call    setup_hardware                          ; set up
 22   8003 3E 00                ld      a, 0
 23   8005 CD 7C 80             call    clsL2
 24   8008
 25   8008 11 00 00             ld      de, $0000
 26   800B DD 21 66 80          ld      ix, snake_test_logo_128
 27   800F CD 7C 81             call    straight_plot
 28   8012
 29   8012 11 C0 00             ld      de, $00c0
 30   8015 DD 21 61 80          ld      ix, snake_test_logo
 31   8019 CD 7C 81             call    straight_plot
 32   801C
 33   801C 11 80 00             ld      de, $0080
 34   801F DD 21 61 80          ld      ix, snake_test_logo
 35   8023 CD 7C 81             call    straight_plot
 36   8026
 37   8026 11 00 80             ld      de, $8000
 38   8029 DD 21 61 80          ld      ix, snake_test_logo
 39   802D CD 7C 81             call    straight_plot
 40   8030
 41   8030 11 C0 80             ld      de, $80c0
 42   8033 DD 21 61 80          ld      ix, snake_test_logo
 43   8037 CD 7C 81             call    straight_plot
 44   803A
 45   803A                      ;ld      de, $0000
 46   803A                      ;ld      ix, snake_test_logo_256
 47   803A                      ;call    straight_plot
 48   803A
 49   803A
 50   803A CD CF 81             call    init_scroller                           ; initialise the scroller
 51   803D
 52   803D              scroll_loop:
 53   803D
 54   803D 3E 02                ld a,2
 54   803F D3 FE          out     ($fe), a
 55   8041 CD AD 82             call    scroll_l2_dma                           ; copies 8x256 pixels of L2 with the DMA
 56   8044 3E 03                ld a,3
 56   8046 D3 FE          out     ($fe), a
 57   8048 CD DB 81             call    update_scroller                         ; update the scroller
 58   804B 3E 07                ld a,7
 58   804D D3 FE          out     ($fe), a
 59   804F 11 50 10             ld      de, $1050
 60   8052                      ;ld      ix, snake_test_logo
 61   8052                      ;call    straight_plot
 62   8052                      ;call    snake_plot
 63   8052 3E 00                ld a,0
 63   8054 D3 FE          out     ($fe), a
 64   8056 CD C9 82             call    wait_vblank
 65   8059 C3 3D 80             jp      scroll_loop                             ; repeatsville
 66   805C
 67   805C
 68   805C              snake_emk_logo:
 69   805C                      ;       bank wdith height
 70   805C                      ;       offset
 71   805C 21 60 20             db      33, 96, 32
 72   805F 02 00                dw      2
 73   8061              snake_test_logo:
 74   8061                      ;       bank wdith height
 75   8061                      ;       offset
 76   8061 21 40 40             db      33, 64, 64
 77   8064 00 0C                dw      3072
 78   8066              snake_test_logo_128:
 79   8066                      ;       bank wdith height
 80   8066                      ;       offset
 81   8066 22 80 80             db      34, 128, 128
 82   8069 00 00                dw      0
 83   806B
 84   806B              snake_test_logo_256:
 85   806B                      ;       bank wdith height
 86   806B                      ;       offset
 87   806B 24 00 BF             db      36, 0, 191
 88   806E 00 00                dw      0
 89   8070              ;------------------------------------------------------------------------------
 90   8070              ; Routines
 91   8070
 92   8070              setup_hardware:
 93   8070 ED 91 07 03          nextreg TURBO_CONTROL_NR_07,3                   ; 28 mhz because
 94   8074 ED 91 4A 00          nextreg TRANSPARENCY_FALLBACK_COL_NR_4A,0
 95   8078                      ;nextreg ULA_CONTROL_NR_68,1<<7                  ; turn off ULA
 96   8078 AF                   xor     a
 96   8079 D3 FE          out     ($fe), a                    ; black border
 97   807B
 98   807B C9                   ret
 99   807C
100   807C              ;------------------------------------------------------------------------------
101   807C              ; Includes
102   807C
103   807C                      include "layer2.asm"
# file opened: ./src/layer2.asm
  1+  807C              clsL2:
  2+  807C              	; Clears L2 320x256 with A as colour
  3+  807C              	; IN A > colour
  4+  807C              	; USES : hl, de, bc, a
  5+  807C
  6+  807C 32 97 80     		ld		(.colour+1), a
  7+  807F 3E 12        		ld		a, $12 				; $12 is L2 RAM start bank register
  8+  8081 CD BE 82     		call	getRegister 		; get L2 ram bank in a
  9+  8084 87           		add		a, a                ; A = start of L2 ram, we need to *2
 10+  8085 06 05        		ld		b, 5                ; 3 blocks to do
 11+  8087
 12+  8087              .L2loop:
 13+  8087 C5           		push	bc 					; save loop counter
 14+  8088
 15+  8088 ED 92 50     		nextreg	MMU0_0000_NR_50, a  ; set 0 - $1fff
 16+  808B 3C           		inc		a
 17+  808C ED 92 51     		nextreg	MMU1_2000_NR_51, a  ; set 0 - $1fff
 18+  808F 3C           		inc		a
 19+  8090
 20+  8090 21 00 00     		ld		hl, 0 				; start at address 0
 21+  8093 11 01 00     		ld		de, 1
 22+  8096              .colour:
 23+  8096 36 14        		ld		(hl), 20            ; smc colour from above
 24+  8098 01 FF 3F     		ld		bc, $3fff			; bytes to clear
 25+  809B ED B0        		ldir
 26+  809D C1           		pop		bc 					; bring back loop counter
 27+  809E 10 E7        		djnz	.L2loop 			; repeat until b = 0
 28+  80A0
 29+  80A0              		; restore ROMS
 30+  80A0
 31+  80A0 ED 91 50 FF  		nextreg	MMU0_0000_NR_50, $ff
 32+  80A4 ED 91 51 FF  		nextreg	MMU1_2000_NR_51, $ff
 33+  80A8
 34+  80A8              		; clear ULA
 35+  80A8 21 00 40     		ld		hl, 16384
 36+  80AB 11 01 40     		ld		de, 16385
 37+  80AE 01 00 1B     		ld		bc, 6912
 38+  80B1 36 00        		ld		(hl), 0
 39+  80B3 ED B0        		ldir
 40+  80B5
 41+  80B5 C9           		ret
 42+  80B6
 43+  80B6
 44+  80B6              LAYER2_ACCESS_PORT 	EQU $123B
 45+  80B6
 46+  80B6              plot_l2:  ; (byVal X as ubyte, byval Y as ubyte, byval T as ubyte)
 47+  80B6                  ; hl = XY , a colour
 48+  80B6
 49+  80B6 01 3B 12             ld		bc,LAYER2_ACCESS_PORT
 50+  80B9 F5                   push	af      								; save colour
 51+  80BA 7C                   ld		a,h     								; put y into A
 52+  80BB E6 C0                and		$c0     								; yy00 0000
 53+  80BD
 54+  80BD F6 03                or		3       								; yy00 0011
 55+  80BF ED 79                out		(c),a   								; select 8k-bank
 56+  80C1 7C                   ld		a,h     								; yyyy yyyy
 57+  80C2 E6 3F                and		63      								; 00yy yyyy
 58+  80C4 67                   ld		h,a
 59+  80C5 F1                   pop		af      								; pop back colour
 60+  80C6 77                   ld		(hl),a									; set pixel value
 61+  80C7
 62+  80C7 3E 02                ld		a,2     								; 0000 0010
 63+  80C9 ED 79                out		(c),a   								; Layer2 writes off
 64+  80CB C9                   ret
 65+  80CC
 66+  80CC
 67+  80CC              set_coords:
 68+  80CC
 69+  80CC E1                   pop     hl
 69+  80CD CD D1 80       call set_xy
 69+  80D0 E9             jp (hl)
 70+  80D1 7E           set_xy: ld      a,(hl)       ; X
 71+  80D2 32 10 81             ld      (L2_coords), a
 72+  80D5 23                   inc     hl
 73+  80D6 7E                   ld      a,(hl)       ; Y
 74+  80D7 32 11 81             ld      (L2_coords+1), a
 75+  80DA 23                   inc     hl
 76+  80DB 7E                   ld      a,(hl)       ; C
 77+  80DC 32 12 81             ld      (L2_coords+2), a
 78+  80DF C9                   ret
 79+  80E0
 80+  80E0
 81+  80E0              L2Line:  ; (byVal Y as ubyte, byval W as ubyte, byval A as ubyte)
 82+  80E0                      ; XY from coords, a = width
 83+  80E0
 84+  80E0 F5                   push    af
 85+  80E1 01 3B 12     		ld   	bc,LAYER2_ACCESS_PORT
 86+  80E4 2A 10 81             ld      hl, (L2_coords)
 87+  80E7 7C           		ld   	a,h     ; put y into A
 88+  80E8 E6 C0        		and  	$c0     ; yy00 0000
 89+  80EA
 90+  80EA F6 03        		or   	3       ; yy00 0011
 91+  80EC ED 79        		out  	(c),a   ; select 8k-bank
 92+  80EE 7C           		ld   	a,h     ; yyyy yyyy
 93+  80EF E6 3F        		and  	63      ; 00yy yyyy
 94+  80F1 67           		ld   	h,a
 95+  80F2 C1                   pop     bc
 96+  80F3 0E 20                ld      c, 32
 97+  80F5              .lineloop2
 98+  80F5 06 20                ld      b, 32
 99+  80F7 2E 00                ld      l, 0
100+  80F9              .lineloop:
101+  80F9                      ;push    bc
102+  80F9 3A 12 81     		ld      a, (L2_coords+2)      ; get colour/map value off stack
103+  80FC 77           		ld  	(hl),a   ; set pixel value
104+  80FD 2C                   inc     l
105+  80FE 78                   ld      a, b
106+  80FF B7                   or      a
107+  8100 20 F7                jr      nz,.lineloop
108+  8102 24                   inc     h
109+  8103 0D                   dec     c
110+  8104 79                   ld      a, c
111+  8105 B7                   or      a
112+  8106 20 ED                jr      nz,.lineloop2
113+  8108
114+  8108 3E 02        		ld   	a,2     ; 0000 0010
115+  810A 01 3B 12             ld   	bc,LAYER2_ACCESS_PORT
116+  810D ED 79        		out  	(c),a   ; Layer2 writes off
117+  810F
118+  810F C9                   ret
119+  8110
120+  8110              L2_coords:      ;  X  Y  C
121+  8110 00 00 00             DB      0 , 0 , 0
122+  8113
123+  8113
124+  8113              get_xy_pos_l2:
125+  8113              ; input d = y, e = x
126+  8113              ; uses de a bc
127+  8113 C5                   push    bc
128+  8114 01 3B 12             ld   	bc,LAYER2_ACCESS_PORT
129+  8117 7A                   ld   	a,d     ; put y into A
130+  8118 E6 C0                and  	$c0     ; yy00 0000
131+  811A
132+  811A F6 03                or   	3       ; yy00 0011
133+  811C ED 79                out  	(c),a   ; select 8k-bank
134+  811E 7A                   ld   	a,d     ; yyyy yyyy
135+  811F E6 3F                and  	63      ; 00yy yyyy
136+  8121 57                   ld   	d,a
137+  8122 C1                   pop     bc
138+  8123 C9                   ret
139+  8124
140+  8124              get_xy_pos_l2_hl:
141+  8124              ; input h = y, l = x
142+  8124              ; uses hl a bc
143+  8124 01 3B 12             ld   	bc,LAYER2_ACCESS_PORT
144+  8127 7C                   ld   	a,h     ; put y into A
145+  8128 E6 C0                and  	$c0     ; yy00 0000
146+  812A
147+  812A F6 03                or   	3       ; yy00 0011
148+  812C ED 79                out  	(c),a   ; select 8k-bank
149+  812E 7C                   ld   	a,h     ; yyyy yyyy
150+  812F E6 3F                and  	63      ; 00yy yyyy
151+  8131 67                   ld   	h,a
152+  8132 C9                   ret
153+  8133
154+  8133              ; snake draw L2
155+  8133
156+  8133              snake_plot:
157+  8133
158+  8133              ; de = xy, ix = snake_data
159+  8133
160+  8133 DD 7E 00             ld      a,(ix+0)
161+  8136 ED 92 50             nextreg $50, a
162+  8139
163+  8139 CD 13 81             call    get_xy_pos_l2
164+  813C                      ; hl now position an mapped in
165+  813C DD 6E 03             ld      l, (ix+3)
166+  813F DD 66 04             ld      h, (ix+4)
167+  8142 23                   inc     hl
168+  8143 23                   inc     hl
169+  8144                      ;ex      de, hl                      ; hl now snake_data, de = destination on l2
170+  8144 DD 7E 02             ld      a, (ix+2)                   ; height
171+  8147 DD 4E 01     .line1: ld      c, (ix+1)                   ; width
172+  814A 06 00                ld      b, 0
173+  814C ED B0                ldir
174+  814E 14                   inc     d                           ; next line down
175+  814F 4F                   ld      c, a
176+  8150 CD 6C 81             call    .check_line
177+  8153 DD 46 01             ld      b, (ix+1)                   ; width
178+  8156 1D           .line2: dec     e
179+  8157 23                   inc     hl
180+  8158 7E                   ld      a, (hl)
181+  8159 12                   ld      (de), a
182+  815A 10 FA                djnz    .line2
183+  815C 14                   inc     d
184+  815D CD 6C 81             call    .check_line
185+  8160 79                   ld      a, c
186+  8161 3D                   dec     a
187+  8162 20 E3                jr      nz, .line1
188+  8164 01 3B 12             ld      bc, LAYER2_ACCESS_PORT
189+  8167 3E 02                ld      a, 2
190+  8169 ED 79                out     (c), a
191+  816B C9                   ret
192+  816C
193+  816C              .check_line:
194+  816C
195+  816C 7A                   ld      a, d
196+  816D FE 40                cp      $40
197+  816F CC 13 81             call    z, get_xy_pos_l2
198+  8172 FE 80                cp      $80
199+  8174 CC 78 81             call    z, 1F
200+  8177 C9                   ret
201+  8178 CD 13 81     1:      call    get_xy_pos_l2
202+  817B C9                   ret
203+  817C
204+  817C              straight_plot:
205+  817C              ; de = yx, ix = source_data
206+  817C                      ; break
207+  817C DD 7E 00             ld      a, (ix+0)
208+  817F ED 92 50             nextreg $50, a
209+  8182 3C                   inc     a
210+  8183 ED 92 51             nextreg $51, a
211+  8186 DD 6E 03             ld      l, (ix+3)       ; source
212+  8189 DD 66 04             ld      h, (ix+4)
213+  818C 23                   inc hl
214+  818D 23                   inc hl
215+  818E DD 46 02             ld      b, (ix+2)       ; height
216+  8191 ED 53 96 81          ld      (.add1+1), de   ; save address
217+  8195              .add1:
218+  8195 11 00 00             ld      de, 0000
219+  8198              .line1:
220+  8198 CD 13 81             call    get_xy_pos_l2
221+  819B C5                   push    bc
222+  819C 06 00                ld      b, 0
223+  819E DD 4E 01             ld      c,(ix+1)        ; width
224+  81A1 ED B0                ldir
225+  81A3 7C                   ld      a, h
226+  81A4 FE 40                cp      $40
227+  81A6 CC BE 81             call    z,.nextbanks
228+  81A9 C1                   pop     bc
229+  81AA ED 5B 96 81          ld      de, (.add1+1)
230+  81AE 14                   inc     d
231+  81AF ED 53 96 81          ld      (.add1+1), de
232+  81B3 05                   dec     b
233+  81B4 20 E2                jr      nz, .line1
234+  81B6 01 3B 12             ld      bc, LAYER2_ACCESS_PORT
235+  81B9 3E 02                ld      a, 2
236+  81BB ED 79                out     (c), a
237+  81BD C9                   ret
238+  81BE              .nextbanks
239+  81BE DD 7E 00             ld      a, (ix+0)
240+  81C1 87                   add     a, a
241+  81C2 87                   add     a, a
242+  81C3 ED 92 50             nextreg $50, a
243+  81C6 3C                   inc     a
244+  81C7 ED 92 51             nextreg $51,a
245+  81CA 7C                   ld      a, h
246+  81CB E6 7F                and     127
247+  81CD 7C                   ld      a, h
248+  81CE
249+  81CE C9                   ret
# file closed: ./src/layer2.asm
104   81CF                      include "scroller.asm"
# file opened: ./src/scroller.asm
  1+  81CF              ; scroller routines
  2+  81CF
  3+  81CF              init_scroller:
  4+  81CF
  5+  81CF 21 73 82             ld      hl,scroller_text-1                      ; set to refresh char on first call
  6+  81D2 22 2C 82             ld      (txt_position),hl
  7+  81D5 21 2E 82             ld      hl,char_count                           ; check for new char
  8+  81D8 36 01                ld      (hl),1
  9+  81DA C9                   ret
 10+  81DB
 11+  81DB              update_scroller:
 12+  81DB
 13+  81DB ED 91 50 1E          nextreg $50, 30                                 ; page in font
 14+  81DF 21 2E 82             ld      hl,char_count                           ; update pixel count
 15+  81E2 35                   dec     (hl)
 16+  81E3 20 28                jr      nz,scroll_text
 17+  81E5
 18+  81E5              new_char:
 19+  81E5 36 08                ld      (hl),8                                  ; reset pixel count
 20+  81E7 2A 2C 82             ld      hl,(txt_position)                       ; update current character
 21+  81EA 23                   inc     hl
 22+  81EB 22 2C 82             ld      (txt_position),hl
 23+  81EE 7E                   ld      a,(hl)                                  ; check for loop token
 24+  81EF B7                   or      a
 25+  81F0 20 06                jr      nz,get_new_glyp
 26+  81F2
 27+  81F2              loop_msg:
 28+  81F2
 29+  81F2 21 74 82             ld      hl,scroller_text                        ; loop if necessary
 30+  81F5 22 2C 82             ld      (txt_position),hl
 31+  81F8
 32+  81F8              get_new_glyp:
 33+  81F8 7E                   ld      a,(hl)                                  ; collect char as ASCII
 34+  81F9 D6 20                sub     32
 35+  81FB 5F                   ld      e, a                                    ; char * 64bytes per tile
 36+  81FC 16 40                ld      d, 64
 37+  81FE ED 30                mul     d, e
 38+  8200 ED 53 30 82          ld      (current_glyph),de                      ; points to correct letter in font
 39+  8204
 40+  8204 EB                   ex      de, hl                                  ; put letter into hl for source
 41+  8205 11 34 82             ld      de, tempcahar                           ; point de to a temp buffer
 42+  8208 01 3F 00             ld      bc, 63                                  ; size to copy
 43+  820B ED B0                ldir
 44+  820D
 45+  820D
 46+  820D              scroll_text:
 47+  820D
 48+  820D 21 34 82             ld      hl, tempcahar                           ; point to buffer
 49+  8210 3A 2E 82             ld      a, (char_count)                         ; which slice of the letter are we printing
 50+  8213 ED 44                neg                                             ; char_count counts down 8>0, we need 0-8
 51+  8215 C6 08                add     a, 8                                    ;
 52+  8217 85                   add     a, l                                    ; add as an offset into the buffer
 53+  8218 6F                   ld      l, a                                    ; put back into L
 54+  8219
 55+  8219 1E FF                ld      e, 255                                  ; x position to draw pixel line
 56+  821B 16 B8                ld      d, 192-8
 57+  821D
 58+  821D CD 13 81             call    get_xy_pos_l2                           ; DE = yx, get position and L2 page in
 59+  8220 06 08                ld      b, 8                                    ; loop 7 times
 60+  8222
 61+  8222              vertical_copy:
 62+  8222 7E                   ld      a, (hl)                                 ; 7 copy one bye
 63+  8223 12                   ld      (de), a                                 ; 7
 64+  8224 3E 08                ld      a, 8                                    ; 7
 65+  8226 ED 31                add     hl, a                                   ; 8
 66+  8228 14                   inc     d                                       ; 4 this is for 256x192 +h +256
 67+  8229 10 F7                djnz    vertical_copy
 68+  822B
 69+  822B C9                   ret
 70+  822C
 71+  822C
 72+  822C 00 00        txt_position:           dw 0
 73+  822E 00           char_count:             db 0
 74+  822F 00           glyph_slice:            db 0
 75+  8230 00 00        current_glyph:          dw 0
 76+  8232 00 00        xpos:                   dw 0
 77+  8234              tempcahar:
 78+  8234 00 00 00...                          ds      64,0
 79+  8274
 80+  8274              scroller_text:
 81+  8274
 82+  8274 48 45 4C 4C          db      "HELLO ZX SPECTRUM NEXT FANS "
 82+  8278 4F 20 5A 58
 82+  827C 20 53 50 45
 82+  8280 43 54 52 55
 82+  8284 4D 20 4E 45
 82+  8288 58 54 20 46
 82+  828C 41 4E 53 20
 83+  8290 48 45 4C 4C          db      "HELLO ZX SPECTRUM NEXT FANS ",00
 83+  8294 4F 20 5A 58
 83+  8298 20 53 50 45
 83+  829C 43 54 52 55
 83+  82A0 4D 20 4E 45
 83+  82A4 58 54 20 46
 83+  82A8 41 4E 53 20
 83+  82AC 00
 84+  82AD
 85+  82AD
 86+  82AD
 87+  82AD              scroll_l2_dma:
 88+  82AD
 89+  82AD ED 91 50 16          nextreg MMU0_0000_NR_50,22
 90+  82B1 21 01 38             ld      hl, 14337
 91+  82B4 11 00 38             ld      de, 14336
 92+  82B7 01 00 08             ld      bc, 8*256
 93+  82BA CD 01 83             call    TransferDMA
 94+  82BD C9                   ret
# file closed: ./src/scroller.asm
105   82BE                      include "utils.asm"
# file opened: ./src/utils.asm
  1+  82BE
  2+  82BE              ;------------------------------------------------------------------------------
  3+  82BE              ; Utils
  4+  82BE
  5+  82BE              getRegister:
  6+  82BE
  7+  82BE              ; IN A > Register to read
  8+  82BE              ; OUT A < Value of Register
  9+  82BE
 10+  82BE C5           		push    bc                                  ; save BC
 11+  82BF 01 3B 24     		ld      bc, TBBLUE_REGISTER_SELECT_P_243B
 12+  82C2 ED 79        		out     (c), a
 13+  82C4 04           		inc     b
 14+  82C5 ED 78        		in      a, (c)
 15+  82C7 C1           		pop     bc
 16+  82C8 C9           		ret
 17+  82C9
 18+  82C9              ; Vsync wait
 19+  82C9
 20+  82C9              wait_vblank:
 21+  82C9 21 01 00     		ld      hl, 1
 22+  82CC              .readline:
 23+  82CC 3E 1F        		ld 		a,VIDEO_LINE_LSB_NR_1F
 24+  82CE 01 3B 24     		ld 		bc,TBBLUE_REGISTER_SELECT_P_243B
 25+  82D1 ED 79        		out 	(c),a
 26+  82D3 04           		inc 	b
 27+  82D4 ED 78        		in 		a,(c)
 28+  82D6 FE AA        		cp 		170								; line to wait for 250
 29+  82D8 20 F2        		jr 		nz,.readline
 30+  82DA              		;dec 	hl
 31+  82DA              		;ld 		a,h
 32+  82DA              		;or 		l
 33+  82DA              		;jr 		nz,.readline
 34+  82DA C9           		ret
# file closed: ./src/utils.asm
106   82DB                      include "copper.asm"
# file opened: ./src/copper.asm
  1+  82DB              COPPER_HORIZONTAL_OFFSET 	= 0
  2+  82DB              ;===========================================================================
  3+  82DB              ; hl = copper list
  4+  82DB              ; bc = length
  5+  82DB              ;===========================================================================
  6+  82DB              StartCopper
  7+  82DB ED 91 62 00  		nextreg COPPER_CONTROL_HI_NR_62, 0	; stop
  8+  82DF ED 91 61 00  		nextreg COPPER_CONTROL_LO_NR_61, 0
  9+  82E3
 10+  82E3 C5           		push 	bc
 11+  82E4 01 3B 24     		ld 		bc, TBBLUE_REGISTER_SELECT_P_243B
 12+  82E7 3E 60        		ld 		a, COPPER_DATA_NR_60
 13+  82E9 ED 79        		out 	(c),a
 14+  82EB C1           		pop 	bc	; select copper data port
 15+  82EC CD 4B 83     		call 	TransferDMAPort
 16+  82EF
 17+  82EF ED 91 62 C0  		nextreg COPPER_CONTROL_HI_NR_62, %11000000 ; start
 18+  82F3 ED 91 61 00  		nextreg COPPER_CONTROL_LO_NR_61, %00000000
 19+  82F7 C9           		ret
 20+  82F8              ;===========================================================================
 21+  82F8              ;
 22+  82F8              ;===========================================================================
 23+  82F8              StopCopper
 24+  82F8 ED 91 62 00  		nextreg COPPER_CONTROL_HI_NR_62, 0	; stop
 25+  82FC ED 91 61 00  		nextreg COPPER_CONTROL_LO_NR_61, 0
 26+  8300 C9           		ret
 27+  8301              ;===========================================================================
 28+  8301              ;
 29+  8301              ;===========================================================================
 30+  8301
# file closed: ./src/copper.asm
107   8301                      include "dma.asm"
# file opened: ./src/dma.asm
  1+  8301              ;===========================================================================
  2+  8301              ; hl = source
  3+  8301              ; de = destination
  4+  8301              ; bc = length
  5+  8301              ;===========================================================================
  6+  8301              TransferDMA
  7+  8301 22 18 83     		ld 		(.dmaSource),hl
  8+  8304 ED 53 21 83  		ld 		(.dmaDest),de
  9+  8308 ED 43 1A 83  		ld 		(.dmaLength),bc
 10+  830C 21 16 83     		ld 		hl,.dmaCode
 11+  830F 06 10        		ld 		b,.dmaCodeLen
 12+  8311 0E 6B        		ld 		c,Z80_DMA_PORT_DATAGEAR
 13+  8313 ED B3        		otir
 14+  8315 C9           		ret
 15+  8316              ;===========================================================================
 16+  8316              ;
 17+  8316              ;===========================================================================
 18+  8316              .dmaCode
 19+  8316 83           		db 		DMA_DISABLE
 20+  8317 7D           		db 		%01111101				;R0-Transfer mode, A -> B, write adress + block length
 21+  8318 00 00        .dmaSource			dw 0					;R0-Port A, Start address				(source address)
 22+  831A 00 00        .dmaLength			dw 0					;R0-Block length					(length in bytes)
 23+  831C 54           		db 		%01010100				;R1-write A time byte, increment, to memory, bitmask
 24+  831D 02           		db 		%00000010				;2t
 25+  831E 50           		db 		%01010000				;R2-write B time byte, increment, to memory, bitmask
 26+  831F 02           		db 		%00000010				;R2-Cycle length port B
 27+  8320 AD           		db 		DMA_CONTINUOUS			;R4-Continuous mode  (use this for block tansfer), write dest adress
 28+  8321 00 00        .dmaDest   		     dw 0					;R4-Dest address					(destination address)
 29+  8323 82           		db 		%10000010				;R5-Restart on end of block, RDY active LOW
 30+  8324 CF           		db 		DMA_LOAD				;R6-Load
 31+  8325 87           		db 		DMA_ENABLE				;R6-Enable DMA
 32+  8326              .dmaCodeLen	equ $-.dmaCode
 33+  8326              ;===========================================================================
 34+  8326              ; hl = source
 35+  8326              ; de = destination
 36+  8326              ; bc = length
 37+  8326              ;===========================================================================
 38+  8326              TransferDMAReversed
 39+  8326 22 3D 83     		ld 		(.dmaSource),hl
 40+  8329 ED 53 46 83  		ld 		(.dmaDest),de
 41+  832D ED 43 3F 83  		ld 		(.dmaLength),bc
 42+  8331 21 3B 83     		ld 		hl,.dmaCode
 43+  8334 06 10        		ld 		b,.dmaCodeLen
 44+  8336 0E 6B        		ld 		c,Z80_DMA_PORT_DATAGEAR
 45+  8338 ED B3        		otir
 46+  833A C9           		ret
 47+  833B              ;===========================================================================
 48+  833B              ;
 49+  833B              ;===========================================================================
 50+  833B              .dmaCode
 51+  833B 83           		db 		DMA_DISABLE
 52+  833C 7D           		db 		%01111101				;R0-Transfer mode, A -> B, write adress + block length
 53+  833D 00 00        .dmaSource		dw 0					;R0-Port A, Start address				(source address)
 54+  833F 00 00        .dmaLength		dw 0					;R0-Block length					(length in bytes)
 55+  8341 44           		db 		%01000100				;R1-write A time byte, increment, to memory, bitmask
 56+  8342 02           		db 		%00000010				;2t
 57+  8343 40           		db 		%01000000				;R2-write B time byte, increment, to memory, bitmask
 58+  8344 02           		db 		%00000010				;R2-Cycle length port B
 59+  8345 AD           		db 		DMA_CONTINUOUS			;R4-Continuous mode  (use this for block tansfer), write dest adress
 60+  8346 00 00        .dmaDest   		dw 0					;R4-Dest address					(destination address)
 61+  8348 82           		db 		%10000010				;R5-Restart on end of block, RDY active LOW
 62+  8349 CF           		db 		DMA_LOAD				;R6-Load
 63+  834A 87           		db 		DMA_ENABLE				;R6-Enable DMA
 64+  834B              .dmaCodeLen	equ $-.dmaCode
 65+  834B              ;===========================================================================
 66+  834B              ; hl = source
 67+  834B              ; bc = length
 68+  834B              ; set port to write to with NEXTREG_REGISTER_SELECT_PORT
 69+  834B              ; prior to call
 70+  834B              ;===========================================================================
 71+  834B              TransferDMAPort
 72+  834B 22 5E 83     		ld 		(.dmaSource),hl
 73+  834E ED 43 60 83  		ld 		(.dmaLength),bc
 74+  8352 21 5C 83     		ld 		hl,.dmaCode
 75+  8355 06 10        		ld 		b,.dmaCodeLen
 76+  8357 0E 6B        		ld 		c,Z80_DMA_PORT_DATAGEAR
 77+  8359 ED B3        		otir
 78+  835B C9           		ret
 79+  835C              ;===========================================================================
 80+  835C              ;
 81+  835C              ;===========================================================================
 82+  835C              .dmaCode
 83+  835C 83           		db 		DMA_DISABLE
 84+  835D 7D           		db 		%01111101				;R0-Transfer mode, A -> B, write adress + block length
 85+  835E              .dmaSource
 86+  835E 00 00        		dw 		0						;R0-Port A, Start address				(source address)
 87+  8360              .dmaLength
 88+  8360 00 00        		dw 		0						;R0-Block length					(length in bytes)
 89+  8362 54           		db 		%01010100				;R1-read A time byte, increment, to memory, bitmask
 90+  8363 02           		db 		%00000010				;R1-Cycle length port A
 91+  8364 68           		db 		%01101000				;R2-write B time byte, increment, to memory, bitmask
 92+  8365 02           		db 		%00000010				;R2-Cycle length port B
 93+  8366 AD           		db 		%10101101 				;R4-Continuous mode  (use this for block tansfer), write dest adress
 94+  8367 3B 25        		dw 		$253b					;R4-Dest address					(destination address)
 95+  8369 82           		db 		%10000010				;R5-Restart on end of block, RDY active LOW
 96+  836A CF           		db 		DMA_LOAD					;R6-Load
 97+  836B 87           		db 		DMA_ENABLE				;R6-Enable DMA
 98+  836C              .dmaCodeLen	equ $-.dmaCode
 99+  836C              ;===========================================================================
100+  836C              ; hl = source
101+  836C              ; bc = length
102+  836C              ;===========================================================================
103+  836C              TransferDMASprite
104+  836C 22 7F 83     		ld 		(.dmaSource),hl
105+  836F ED 43 81 83  		ld 		(.dmaLength),bc
106+  8373 21 7D 83     		ld 		hl,.dmaCode
107+  8376 06 10        		ld 		b,.dmaCodeLen
108+  8378 0E 6B        		ld 		c,Z80_DMA_PORT_DATAGEAR
109+  837A ED B3        		otir
110+  837C C9           		ret
111+  837D              ;===========================================================================
112+  837D              ;
113+  837D              ;===========================================================================
114+  837D              .dmaCode
115+  837D 83           		db 		DMA_DISABLE
116+  837E 7D           		db 		%01111101				;R0-Transfer mode, A -> B, write adress + block length
117+  837F 00 00        .dmaSource	dw 	0					;R0-Port A, Start address				(source address)
118+  8381 00 00        .dmaLength	dw 	0					;R0-Block length					(length in bytes)
119+  8383 54           		db 		%01010100				;R1-read A time byte, increment, to memory, bitmask
120+  8384 02           		db 		%00000010				;R1-Cycle length port A
121+  8385 68           		db 		%01101000				;R2-write B time byte, increment, to memory, bitmask
122+  8386 02           		db 		%00000010				;R2-Cycle length port B
123+  8387 AD           		db 		%10101101 				;R4-Continuous mode  (use this for block tansfer), write dest adress
124+  8388 5B 00        		dw 		SPRITE_IMAGE_PORT			;R4-Dest address					(destination address)
125+  838A 82           		db 		%10000010				;R5-Restart on end of block, RDY active LOW
126+  838B CF           		db 		DMA_LOAD				;R6-Load
127+  838C 87           		db 		DMA_ENABLE				;R6-Enable DMA
128+  838D              .dmaCodeLen	equ $-.dmaCode
129+  838D              ;===========================================================================
130+  838D              ; de = dest, a = fill value, bc = length
131+  838D              ;===========================================================================
132+  838D              DMAFill
133+  838D 32 A2 83     	ld (.fillValue),a
133+  8390 ED 53 AC 83   ld (.dmaDest),de
133+  8394 ED 43 A7 83   ld (.dmaLength),bc
134+  8398 21 A3 83     	ld hl,.dmaCode
134+  839B 06 0D         ld b,.dmaCodeLen
134+  839D 0E 6B         ld c,Z80_DMA_PORT_DATAGEAR
135+  839F ED B3        	otir
136+  83A1 C9           	ret
137+  83A2              ;===========================================================================
138+  83A2              ;
139+  83A2              ;===========================================================================
140+  83A2 16           .fillValue	db 22
141+  83A3 83           .dmaCode	db DMA_DISABLE
142+  83A4 7D           			db %01111101
143+  83A5 A2 83        .dmaSource	dw .fillValue
144+  83A7 00 00        .dmaLength	dw 0
145+  83A9 24 10 AD     			db %00100100,%00010000,%10101101
146+  83AC 00 00        .dmaDest	dw 0
147+  83AE CF 87        			db DMA_LOAD,DMA_ENABLE
148+  83B0              .dmaCodeLen	equ $-.dmaCode
149+  83B0              ;===========================================================================
150+  83B0              ;
151+  83B0              ;===========================================================================
152+  83B0
# file closed: ./src/dma.asm
108   83B0                      include "copper_settings.asm"
# file opened: ./src/copper_settings.asm
  1+  83B0
  2+  83B0              InitCopper
  3+  83B0 01 0A 00     		ld 		bc, .copperend-.copper
  4+  83B3 21 B9 83     		ld 		hl, .copper
  5+  83B6 C3 DB 82     		jp 		StartCopper
  6+  83B9              .copper
  7+  83B9 80 20 71 00  		db 		COPPER_WAIT_H, 32,  LAYER2_XOFFSET_MSB_NR_71,0
  8+  83BD 80 40 71 00  		db 		COPPER_WAIT_H, 64, LAYER2_XOFFSET_MSB_NR_71,0
  9+  83C1
 10+  83C1 FF FF        		dw 		$ffff
 11+  83C3              .copperend
# file closed: ./src/copper_settings.asm
109   83C3
110   83C3              ;------------------------------------------------------------------------------
111   83C3              ; Stack reservation
112   83C3              STACK_SIZE      equ     100
113   83C3
114   83C3              stack_bottom:
115   83C3 00 00 00...          defs    STACK_SIZE * 2
116   848B              stack_top:
117   848B 00 00                defw    0
118   848D
119   848D              ;------------------------------------------------------------------------------
120   848D              ; Banked includes
121   848D
122   848D                      org     $e000
123   E000                      mmu     7 n, 30
124   E000                      incbin  "data/font.nxt"                          ; 256 colour font
125   F680
126   F680                      org     $e000
127   E000                      mmu     7 n, 18
128   E000                      incbin  "data/zxnext.bmp", 1078                  ; background
129   E000
130   E000                      org     $e000
131   E000                      mmu     7 n, 31
132   E000                      incbin  "data/back64pb.snk"                        ; background
133   F000
134   F000                      org     $e000
135   E000                      mmu     7 n, 32
136   E000                      incbin  "data/emk1.snk"                        ; background
137   EC02                      incbin  "data/ZXNEXT_64x64.snk"                        ; background
138   FC04                      org     $e000
139   E000                      mmu     7 n, 33
140   E000                      incbin  "data/emk1.raw"                        ; background
141   EC02                      incbin  "data/ZXNEXT_64x64.raw"
142   FC02                      org     $e000
143   E000                      mmu     7 n, 34
144   E000                      incbin  "data/ZXNEXT_128x128.raw"                        ; background
145   E002                      org     $e000
146   E000
147   E000                      mmu     7 n, 36
148   E000                      incbin  "data/ZX NEXT_256x192.raw"                        ; background
149   E002
150   E002
151   E002              ;------------------------------------------------------------------------------
152   E002              ; Output configuration
153   E002
154   E002                      SAVENEX OPEN "l2scroller.nex", main, stack_top
155   E002                      SAVENEX CORE 2,0,0
156   E002                      SAVENEX CFG 7,0,0,0
157   E002                      SAVENEX AUTO
158   E002                      SAVENEX CLOSE
# file closed: ./src/main.asm
